using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;
using JobService.Model;
using System.Data;
using JobService.Common;
using Dapper;
using System.Data.SqlClient;

namespace JobService.DAL
{
    public class DBHelper
    {

        private const string S_SelectPasteInfo = @"SELECT REEL_NO,DATE_CODE,CURRENT_STATUS FROM SAJET.G_MATERIAL_SOLDER WHERE CURRENT_STATUS IN ('F','W','M')";

        private const string S_SelectEmailInfo = @"SELECT * FROM SAJET.SYS_BASE WHERE PARAM_NAME='BU23'";

        private const string I_InsertPasteInfo = @"INSERT INTO SAJET.G_HT_MATERIAL_SOLDER 
                                                  SELECT REEL_NO,PART_ID,PDLINE_ID,DATE_CODE,RETURN_COUNT,MIX_MIN,CURRENT_STATUS,
                                                  CURRENT_TIME,CURRENT_USERID,LAST_STATUS,LAST_TIME,LAST_USERID,CREATE_TIME,
                                                  CREATE_USERID,MEMO,TAKEOUT_TIME,TAKEOUT_USERID,OPENED,OPEN_TIME,OPEN_USERID,
                                                  PICK_EMP_ID,C_PART_ID 
                                                  FROM SAJET.G_MATERIAL_SOLDER 
                                                  WHERE REEL_NO =:REEL_NO";

        private const string U_UpdatePasteStatus = @"UPDATE SAJET.G_MATERIAL_SOLDER 
                                                   SET  LAST_TIME=CURRENT_TIME,LAST_STATUS=CURRENT_STATUS,CURRENT_STATUS='S',CURRENT_TIME=SYSDATE 
                                                   WHERE  REEL_NO=:REEL_NO";

        private const string S_SelectLogiCapacity = @"SELECT PROCESS_ID,SUM( PASS_QTY ) AS PASS_QTY,SUM( FAIL_QTY ) AS FAIL_QTY,
	                                                  SUM( REPASS_QTY ) AS REPASS_QTY,SUM( REFAIL_QTY ) AS REFAIL_QTY,
                                                      SUM( OUTPUT_QTY ) AS OUTPUT_QTY FROM SAJET.G_SN_COUNT 
                                                      WHERE (PDLINE_ID = '10613' OR PDLINE_ID = '10615')
                                                      AND WORK_DATE = :WORK_DATE AND WORK_TIME >= :LASTHOUR 
                                                      AND WORK_TIME <= :HOUR GROUP BY PROCESS_ID";

        private const string S_SelectProcessName = @"SELECT PROCESS_NAME FROM SAJET.SYS_PROCESS WHERE PROCESS_ID = :PROCESS_ID";


        /// <summary>
        /// 获取冰库、回温、搅拌状态锡膏的全部信息
        /// </summary>
        /// <returns>锡膏全部信息</returns>
        public List<LuxSolder> GetAllSolderInfo(OracleConnection connection)
        {
            List<LuxSolder> pasteList = new List<LuxSolder>();
            using (connection)
            {
                pasteList = connection.Query(S_SelectPasteInfo).Select
                  (
                  p => new LuxSolder
                  {
                      REEL_NO = p.REEL_NO,
                      DATE_CODE = p.DATE_CODE,
                      CURRENT_STATUS = p.CURRENT_STATUS
                  }
                  ).ToList();
                return pasteList;
            }
        }

        /// <summary>
        /// 获取发送邮件接收人和抄送人
        /// </summary>
        /// <returns>发送人和抄送人的全部信息</returns>
        public void GetEmailPerson(OracleConnection connection, string program, ref List<string> recipientList, ref List<string> ccList)
        {
            using (connection)
            {
                List<dynamic> emailList = new List<dynamic>();
                emailList = connection.Query<dynamic>(S_SelectEmailInfo).ToList();
                foreach (var emailinfo in emailList)
                {
                    if (emailinfo.PROGRAM == program + "TO")
                        recipientList.Add(emailinfo.PARAM_VALUE);
                    else if (emailinfo.PROGRAM == program + "CC")
                        ccList.Add(emailinfo.PARAM_VALUE);
                }
            }

        }

        /// <summary>
        /// 备份锡膏信息
        /// </summary>
        /// <param name="solder">锡膏对象</param>
        public void CopySolderMess(OracleConnection connection, LuxSolder solder)
        {
            using (connection)
            {
                connection.Execute(I_InsertPasteInfo, new { REEL_NO = solder.REEL_NO });
            }

        }

        /// <summary>
        /// 报废锡膏
        /// </summary>
        /// <param name="solder">锡膏对象</param>
        public void UpdateSolderStatusToScrap(OracleConnection connection, LuxSolder solder)
        {
            using (connection)
            {
                connection.Execute(U_UpdatePasteStatus, new { REEL_NO = solder.REEL_NO });
            }

        }

        /// <summary>
        /// 取Logi两小时产能
        /// </summary>
        /// <param name="work_date"></param>
        /// <param name="work_time"></param>
        /// <returns></returns>
        public List<LogiCapacityModel> GetLogiCapacity(OracleConnection connection, string work_date, int work_time)
        {
            using (connection)
            {
                var quaryPara = new
                {
                    WORK_DATE = work_date,
                    LASTHOUR = work_time - 1,
                    HOUR = work_time
                };
                List<LogiCapacityModel> logiCapacityInfo = connection.Query(S_SelectLogiCapacity, quaryPara).Select
                    (
                    p => new LogiCapacityModel
                    {
                        Process_ID = p.PROCESS_ID,
                        TimeRange = $"{work_time - 1}-{work_time}",
                        PASS_QTY = p.PASS_QTY,
                        FAIL_QTY = p.FAIL_QTY,
                        REFAIL_QTY = p.REFAIL_QTY,
                        REPASS_QTY = p.REPASS_QTY,
                        OUTPUT_QTY = p.OUTPUT_QTY,
                        StationName = GetProcessName(ConnectionFactory.CreatKSConnection(), p.PROCESS_ID)
                    }
                    ).ToList();
                return logiCapacityInfo;
            }


        }

        /// <summary>
        /// 根据ProcessID取ProcessName
        /// </summary>
        /// <param name="processId"></param>
        /// <returns></returns>
        public string GetProcessName(OracleConnection connection, decimal processId)
        {
            using (connection)
            {
                string processName = connection.QueryFirst<string>(S_SelectProcessName, new { PROCESS_ID = processId });
                return processName;
            }

        }
    }
}
